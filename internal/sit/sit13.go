/*
StuffIt file archiver client

XAD library system for archive handling
Copyright (C) 1998 and later by Dirk Stoecker <soft@dstoecker.de>

little based on macutils 2.0b3 macunpack by Dik T. Winter
Copyright (C) 1992 Dik T. Winter <dik@cwi.nl>

algorithm 15 is based on the work of  Matthew T. Russotto
Copyright (C) 2002 Matthew T. Russotto <russotto@speakeasy.net>
http://www.speakeasy.org/~russotto/arseniccomp.html

ported to Go
Copyright (C) 2025 Elliot Nunn

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package sit

const (
	SIT_VERSION        = 1
	SIT_REVISION       = 12
	SIT5_VERSION       = SIT_VERSION
	SIT5_REVISION      = SIT_REVISION
	SIT5EXE_VERSION    = SIT_VERSION
	SIT5EXE_REVISION   = SIT_REVISION
	MACBINARY_VERSION  = SIT_VERSION
	MACBINARY_REVISION = SIT_REVISION
	PACKIT_VERSION     = SIT_VERSION
	PACKIT_REVISION    = SIT_REVISION

	SITFH_COMPRMETHOD  = 0   /* uint8 rsrc fork compression method */
	SITFH_COMPDMETHOD  = 1   /* uint8 data fork compression method */
	SITFH_FNAMESIZE    = 2   /* uint8 filename size */
	SITFH_FNAME        = 3   /* uint8 83 byte filename */
	SITFH_FTYPE        = 66  /* uint32 file type */
	SITFH_CREATOR      = 70  /* uint32 file creator */
	SITFH_FNDRFLAGS    = 74  /* uint16 Finder flags */
	SITFH_CREATIONDATE = 76  /* uint32 creation date */
	SITFH_MODDATE      = 80  /* uint32 modification date */
	SITFH_RSRCLENGTH   = 84  /* uint32 decompressed rsrc length */
	SITFH_DATALENGTH   = 88  /* uint32 decompressed data length */
	SITFH_COMPRLENGTH  = 92  /* uint32 compressed rsrc length */
	SITFH_COMPDLENGTH  = 96  /* uint32 compressed data length */
	SITFH_RSRCCRC      = 100 /* uint16 crc of rsrc fork */
	SITFH_DATACRC      = 102 /* uint16 crc of data fork */ /* 6 reserved bytes */
	SITFH_HDRCRC       = 110 /* uint16 crc of file header */
	SIT_FILEHDRSIZE    = 112

	SITAH_SIGNATURE  = 0  /* uint32 signature = 'SIT!' */
	SITAH_NUMFILES   = 4  /* uint16 number of files in archive */
	SITAH_ARCLENGTH  = 6  /* uint32 arcLength length of entire archive incl. header */
	SITAH_SIGNATURE2 = 10 /* uint32 signature2 = 'rLau' */
	SITAH_VERSION    = 14 /* uint8 version number */
	SIT_ARCHDRSIZE   = 22 /* +7 reserved bytes */

	/* compression methods */
	SITnocomp  = 0 /* just read each byte and write it to archive */
	SITrle     = 1 /* RLE compression */
	SITlzc     = 2 /* LZC compression */
	SIThuffman = 3 /* Huffman compression */

	SITlzah   = 5 /* LZ with adaptive Huffman */
	SITfixhuf = 6 /* Fixed Huffman table */

	SITmw = 8 /* Miller-Wegman encoding */

	SITprot    = 16 /* password protected bit */
	SITsfolder = 32 /* start of folder */
	SITefolder = 33 /* end of folder */
)

type SITPrivate struct {
	CRC    uint16
	Method uint8
}

const SITESC = 0x90 /* repeat packing escape */

type SIT13Buffer struct {
	data uint16
	bits int8
}

type SIT13Store struct {
	freq int16
	d1   uint16
	d2   uint16
}

type SIT13Data struct {
	MaxBits  uint16
	Buffer4  [0xE08]SIT13Store
	Buffer1  [0x1000]SIT13Buffer
	Buffer2  [0x1000]SIT13Buffer
	Buffer3  [0x1000]SIT13Buffer
	Buffer3b [0x1000]SIT13Buffer
	Buffer5  [0x141]SIT13Buffer
	TextBuf  [658]uint8
	Window   [0x10000]uint8
}

var SIT13Bits = [16]uint8{0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15}
var SIT13Info = [37]uint16{
	0x5D8, 0x058, 0x040, 0x0C0, 0x000, 0x078, 0x02B, 0x014,
	0x00C, 0x01C, 0x01B, 0x00B, 0x010, 0x020, 0x038, 0x018,
	0x0D8, 0xBD8, 0x180, 0x680, 0x380, 0xF80, 0x780, 0x480,
	0x080, 0x280, 0x3D8, 0xFD8, 0x7D8, 0x9D8, 0x1D8, 0x004,
	0x001, 0x002, 0x007, 0x003, 0x008,
}
var SIT13InfoBits = [37]uint16{
	11, 8, 8, 8, 8, 7, 6, 5, 5, 5, 5, 6, 5, 6, 7, 7,
	9, 12, 10, 11, 11, 12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 5,
	2, 2, 3, 4, 5,
}
var SIT13StaticPos = [5]uint16{0, 330, 661, 991, 1323}
var SIT13StaticBits = [5]uint8{11, 13, 14, 11, 11}
var SIT13Static = [1655]uint8{
	0xB8, 0x98, 0x78, 0x77, 0x75, 0x97, 0x76, 0x87, 0x77, 0x77, 0x77, 0x78, 0x67, 0x87, 0x68, 0x67, 0x3B, 0x77, 0x78, 0x67,
	0x77, 0x77, 0x77, 0x59, 0x76, 0x87, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x76, 0x87, 0x67, 0x87, 0x77, 0x77, 0x75, 0x88,
	0x59, 0x75, 0x79, 0x77, 0x78, 0x68, 0x77, 0x67, 0x73, 0xB6, 0x65, 0xB6, 0x76, 0x97, 0x67, 0x47, 0x9A, 0x2A, 0x4A, 0x87,
	0x77, 0x78, 0x67, 0x86, 0x78, 0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x68, 0x77, 0x77, 0x77, 0x67, 0x87, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77, 0x77, 0x77, 0x67, 0x87,
	0x68, 0x77, 0x77, 0x77, 0x68, 0x77, 0x68, 0x63, 0x86, 0x7A, 0x87, 0x77, 0x77, 0x87, 0x76, 0x87, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x76, 0x86, 0x77, 0x86, 0x86, 0x86, 0x86, 0x87, 0x76, 0x86, 0x87, 0x67, 0x74, 0xA7, 0x86,
	0x36, 0x88, 0x78, 0x76, 0x87, 0x76, 0x96, 0x87, 0x77, 0x84, 0xA6, 0x86, 0x87, 0x76, 0x92, 0xB5, 0x94, 0xA6, 0x96, 0x85,
	0x78, 0x75, 0x96, 0x86, 0x86, 0x75, 0xA7, 0x67, 0x87, 0x85, 0x87, 0x85, 0x95, 0x77, 0x77, 0x85, 0xA3, 0xA7, 0x93, 0x87,
	0x86, 0x94, 0x85, 0xA8, 0x67, 0x85, 0xA5, 0x95, 0x86, 0x68, 0x67, 0x77, 0x96, 0x78, 0x75, 0x86, 0x77, 0xA5, 0x67, 0x87,
	0x85, 0xA6, 0x75, 0x96, 0x85, 0x87, 0x95, 0x95, 0x87, 0x86, 0x94, 0xA5, 0x86, 0x85, 0x87, 0x86, 0x86, 0x86, 0x86, 0x77,
	0x67, 0x76, 0x66, 0x9A, 0x75, 0xA5, 0x94, 0x97, 0x76, 0x96, 0x76, 0x95, 0x86, 0x77, 0x86, 0x87, 0x75, 0xA5, 0x96, 0x85,
	0x86, 0x96, 0x86, 0x86, 0x85, 0x96, 0x86, 0x76, 0x95, 0x86, 0x95, 0x95, 0x95, 0x87, 0x76, 0x87, 0x76, 0x96, 0x85, 0x78,
	0x75, 0xA6, 0x85, 0x86, 0x95, 0x86, 0x95, 0x86, 0x45, 0x69, 0x78, 0x77, 0x87, 0x67, 0x69, 0x58, 0x79, 0x68, 0x78, 0x87,
	0x78, 0x66, 0x88, 0x68, 0x68, 0x77, 0x76, 0x87, 0x68, 0x68, 0x69, 0x58, 0x5A, 0x4B, 0x76, 0x88, 0x69, 0x67, 0xA7, 0x70,
	0x9F, 0x90, 0xA4, 0x84, 0x77, 0x77, 0x77, 0x89, 0x17, 0x77, 0x7B, 0xA7, 0x86, 0x87, 0x77, 0x68, 0x68, 0x69, 0x67, 0x78,
	0x77, 0x78, 0x76, 0x87, 0x77, 0x76, 0x73, 0xB6, 0x87, 0x96, 0x66, 0x87, 0x76, 0x85, 0x87, 0x78, 0x77, 0x77, 0x86, 0x77,
	0x86, 0x78, 0x66, 0x76, 0x77, 0x87, 0x86, 0x78, 0x76, 0x76, 0x86, 0xA5, 0x67, 0x97, 0x77, 0x87, 0x87, 0x76, 0x66, 0x59,
	0x67, 0x59, 0x77, 0x6A, 0x65, 0x86, 0x78, 0x94, 0x77, 0x88, 0x77, 0x78, 0x86, 0x86, 0x76, 0x88, 0x76, 0x87, 0x67, 0x87,
	0x77, 0x77, 0x76, 0x87, 0x86, 0x77, 0x77, 0x77, 0x86, 0x86, 0x76, 0x96, 0x77, 0x77, 0x76, 0x78, 0x86, 0x86, 0x86, 0x95,
	0x86, 0x96, 0x85, 0x95, 0x86, 0x87, 0x75, 0x88, 0x77, 0x87, 0x57, 0x78, 0x76, 0x86, 0x76, 0x96, 0x86, 0x87, 0x76, 0x87,
	0x86, 0x76, 0x77, 0x86, 0x78, 0x78, 0x57, 0x87, 0x86, 0x76, 0x85, 0xA5, 0x87, 0x76, 0x86, 0x86, 0x85, 0x86, 0x53, 0x98,
	0x78, 0x78, 0x77, 0x87, 0x79, 0x67, 0x79, 0x85, 0x87, 0x69, 0x67, 0x68, 0x78, 0x69, 0x68, 0x69, 0x58, 0x87, 0x66, 0x97,
	0x68, 0x68, 0x76, 0x85, 0x78, 0x87, 0x67, 0x97, 0x67, 0x74, 0xA2, 0x28, 0x77, 0x78, 0x77, 0x77, 0x78, 0x68, 0x67, 0x78,
	0x77, 0x78, 0x68, 0x68, 0x77, 0x59, 0x67, 0x5A, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x67, 0x77, 0x78, 0x68, 0x68, 0x78,
	0x59, 0x58, 0x76, 0x77, 0x68, 0x78, 0x68, 0x59, 0x69, 0x58, 0x68, 0x68, 0x67, 0x78, 0x77, 0x78, 0x69, 0x58, 0x68, 0x57,
	0x78, 0x67, 0x78, 0x76, 0x88, 0x58, 0x67, 0x7A, 0x46, 0x88, 0x77, 0x78, 0x68, 0x68, 0x66, 0x78, 0x78, 0x68, 0x68, 0x59,
	0x68, 0x69, 0x68, 0x59, 0x67, 0x78, 0x59, 0x58, 0x69, 0x59, 0x67, 0x68, 0x67, 0x69, 0x69, 0x57, 0x79, 0x68, 0x59, 0x59,
	0x59, 0x68, 0x68, 0x68, 0x58, 0x78, 0x67, 0x59, 0x68, 0x78, 0x59, 0x58, 0x78, 0x58, 0x76, 0x78, 0x68, 0x68, 0x68, 0x69,
	0x59, 0x67, 0x68, 0x69, 0x59, 0x59, 0x58, 0x69, 0x59, 0x59, 0x58, 0x5A, 0x58, 0x68, 0x68, 0x59, 0x58, 0x68, 0x66, 0x47,
	0x88, 0x77, 0x87, 0x77, 0x87, 0x76, 0x87, 0x87, 0x87, 0x77, 0x77, 0x87, 0x67, 0x96, 0x78, 0x76, 0x87, 0x68, 0x77, 0x77,
	0x76, 0x86, 0x96, 0x86, 0x88, 0x77, 0x85, 0x86, 0x8B, 0x76, 0x0A, 0xF9, 0x07, 0x38, 0x57, 0x67, 0x77, 0x78, 0x77, 0x91,
	0x77, 0xD7, 0x77, 0x7A, 0x67, 0x3C, 0x68, 0x68, 0x77, 0x68, 0x78, 0x59, 0x77, 0x68, 0x77, 0x68, 0x76, 0x77, 0x69, 0x68,
	0x68, 0x68, 0x68, 0x67, 0x68, 0x68, 0x77, 0x87, 0x77, 0x67, 0x78, 0x68, 0x67, 0x58, 0x78, 0x68, 0x77, 0x68, 0x78, 0x67,
	0x68, 0x68, 0x67, 0x78, 0x77, 0x77, 0x87, 0x77, 0x76, 0x67, 0x86, 0x85, 0x87, 0x86, 0x97, 0x58, 0x67, 0x79, 0x57, 0x77,
	0x87, 0x77, 0x87, 0x77, 0x76, 0x59, 0x78, 0x77, 0x77, 0x68, 0x77, 0x77, 0x76, 0x78, 0x77, 0x77, 0x77, 0x76, 0x87, 0x77,
	0x77, 0x68, 0x77, 0x77, 0x77, 0x67, 0x78, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x68, 0x77, 0x76, 0x68, 0x87, 0x77,
	0x77, 0x77, 0x77, 0x68, 0x77, 0x68, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x76, 0x78, 0x77, 0x77, 0x76, 0x87, 0x77, 0x77,
	0x67, 0x78, 0x77, 0x77, 0x76, 0x78, 0x67, 0x68, 0x68, 0x29, 0x77, 0x88, 0x78, 0x78, 0x77, 0x68, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x4A, 0x77, 0x4A, 0x74, 0x77, 0x77, 0x68, 0xA4, 0x7A, 0x47, 0x76, 0x86, 0x78, 0x76, 0x7A, 0x4A,
	0x83, 0xB2, 0x87, 0x77, 0x87, 0x76, 0x96, 0x86, 0x96, 0x76, 0x78, 0x87, 0x77, 0x85, 0x87, 0x85, 0x96, 0x65, 0xB5, 0x95,
	0x96, 0x77, 0x77, 0x86, 0x76, 0x86, 0x86, 0x87, 0x86, 0x86, 0x76, 0x96, 0x96, 0x57, 0x77, 0x85, 0x97, 0x85, 0x86, 0xA5,
	0x86, 0x85, 0x87, 0x77, 0x68, 0x78, 0x77, 0x95, 0x86, 0x75, 0x87, 0x76, 0x86, 0x79, 0x68, 0x84, 0x96, 0x76, 0xB3, 0x87,
	0x77, 0x68, 0x86, 0xA5, 0x77, 0x56, 0xB6, 0x68, 0x85, 0x93, 0xB6, 0x95, 0x95, 0x85, 0x95, 0xA5, 0x95, 0x95, 0x69, 0x85,
	0x95, 0x85, 0x86, 0x86, 0x97, 0x84, 0x85, 0xB6, 0x84, 0xA5, 0x95, 0xA4, 0x95, 0x95, 0x95, 0x68, 0x95, 0x66, 0xA6, 0x95,
	0x95, 0x95, 0x86, 0x93, 0xB5, 0x86, 0x77, 0x94, 0x96, 0x95, 0x96, 0x85, 0x68, 0x94, 0x87, 0x95, 0x86, 0x86, 0x93, 0xB4,
	0xA3, 0xB3, 0xA6, 0x86, 0x85, 0x85, 0x96, 0x76, 0x86, 0x64, 0x69, 0x78, 0x68, 0x78, 0x78, 0x77, 0x67, 0x79, 0x68, 0x79,
	0x59, 0x56, 0x87, 0x98, 0x68, 0x78, 0x76, 0x88, 0x68, 0x68, 0x67, 0x76, 0x87, 0x68, 0x78, 0x76, 0x78, 0x77, 0x78, 0xA6,
	0x80, 0xAF, 0x81, 0x38, 0x47, 0x67, 0x77, 0x78, 0x77, 0x89, 0x07, 0x79, 0xB7, 0x87, 0x86, 0x86, 0x87, 0x86, 0x87, 0x76,
	0x78, 0x77, 0x87, 0x66, 0x96, 0x86, 0x86, 0x74, 0xA6, 0x87, 0x86, 0x77, 0x86, 0x77, 0x76, 0x77, 0x77, 0x87, 0x77, 0x77,
	0x77, 0x77, 0x87, 0x65, 0x78, 0x77, 0x78, 0x75, 0x88, 0x85, 0x76, 0x87, 0x95, 0x77, 0x86, 0x87, 0x86, 0x96, 0x85, 0x76,
	0x69, 0x67, 0x59, 0x77, 0x6A, 0x65, 0x86, 0x78, 0x94, 0x77, 0x88, 0x77, 0x78, 0x85, 0x96, 0x65, 0x98, 0x77, 0x87, 0x67,
	0x86, 0x77, 0x87, 0x66, 0x87, 0x86, 0x86, 0x86, 0x77, 0x86, 0x86, 0x76, 0x87, 0x86, 0x77, 0x76, 0x87, 0x77, 0x86, 0x86,
	0x86, 0x87, 0x76, 0x95, 0x86, 0x86, 0x87, 0x65, 0x97, 0x86, 0x87, 0x76, 0x86, 0x86, 0x87, 0x75, 0x88, 0x76, 0x87, 0x76,
	0x87, 0x76, 0x77, 0x77, 0x86, 0x78, 0x76, 0x76, 0x96, 0x78, 0x76, 0x77, 0x86, 0x77, 0x77, 0x76, 0x96, 0x75, 0x95, 0x56,
	0x87, 0x87, 0x87, 0x78, 0x88, 0x67, 0x87, 0x87, 0x58, 0x87, 0x77, 0x87, 0x77, 0x76, 0x87, 0x96, 0x59, 0x88, 0x37, 0x89,
	0x69, 0x69, 0x84, 0x96, 0x67, 0x77, 0x57, 0x4B, 0x58, 0xB7, 0x80, 0x8E, 0x0D, 0x78, 0x87, 0x77, 0x87, 0x68, 0x79, 0x49,
	0x76, 0x78, 0x77, 0x5A, 0x67, 0x69, 0x68, 0x68, 0x68, 0x4A, 0x68, 0x69, 0x67, 0x69, 0x59, 0x58, 0x68, 0x67, 0x69, 0x77,
	0x77, 0x69, 0x68, 0x68, 0x66, 0x68, 0x87, 0x68, 0x77, 0x5A, 0x68, 0x67, 0x68, 0x68, 0x67, 0x78, 0x78, 0x67, 0x6A, 0x59,
	0x67, 0x57, 0x95, 0x78, 0x77, 0x86, 0x88, 0x57, 0x77, 0x68, 0x67, 0x79, 0x76, 0x76, 0x98, 0x68, 0x75, 0x68, 0x88, 0x58,
	0x87, 0x5A, 0x57, 0x79, 0x67, 0x59, 0x78, 0x49, 0x58, 0x77, 0x79, 0x49, 0x68, 0x59, 0x77, 0x68, 0x78, 0x48, 0x79, 0x67,
	0x68, 0x59, 0x68, 0x68, 0x59, 0x75, 0x6A, 0x68, 0x76, 0x4C, 0x67, 0x77, 0x78, 0x59, 0x69, 0x56, 0x96, 0x68, 0x68, 0x68,
	0x77, 0x69, 0x67, 0x68, 0x67, 0x78, 0x69, 0x68, 0x58, 0x59, 0x68, 0x68, 0x69, 0x49, 0x77, 0x59, 0x67, 0x69, 0x67, 0x68,
	0x65, 0x48, 0x77, 0x87, 0x86, 0x96, 0x88, 0x75, 0x87, 0x96, 0x87, 0x95, 0x87, 0x77, 0x68, 0x86, 0x77, 0x77, 0x96, 0x68,
	0x86, 0x77, 0x85, 0x5A, 0x81, 0xD5, 0x95, 0x68, 0x99, 0x74, 0x98, 0x77, 0x09, 0xF9, 0x0A, 0x5A, 0x66, 0x58, 0x77, 0x87,
	0x91, 0x77, 0x77, 0xE9, 0x77, 0x77, 0x77, 0x76, 0x87, 0x75, 0x97, 0x77, 0x77, 0x77, 0x78, 0x68, 0x68, 0x68, 0x67, 0x3B,
	0x59, 0x77, 0x77, 0x57, 0x79, 0x57, 0x86, 0x87, 0x67, 0x97, 0x77, 0x57, 0x79, 0x77, 0x77, 0x75, 0x95, 0x77, 0x79, 0x75,
	0x97, 0x57, 0x77, 0x79, 0x58, 0x69, 0x77, 0x77, 0x77, 0x77, 0x77, 0x75, 0x86, 0x77, 0x87, 0x58, 0x95, 0x78, 0x65, 0x8A,
	0x39, 0x58, 0x87, 0x96, 0x87, 0x77, 0x77, 0x77, 0x86, 0x87, 0x76, 0x78, 0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x68, 0x77, 0x68, 0x77, 0x67, 0x86, 0x77, 0x78, 0x77, 0x77, 0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77, 0x77, 0x68,
	0x77, 0x68, 0x77, 0x67, 0x78, 0x77, 0x77, 0x68, 0x68, 0x76, 0x87, 0x68, 0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x68, 0x77, 0x77, 0x77, 0x68, 0x68, 0x68, 0x76, 0x38, 0x97, 0x67, 0x79, 0x77, 0x77, 0x77, 0x77, 0x77,
	0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x78, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x68,
	0x72, 0xC5, 0x86, 0x86, 0x98, 0x77, 0x86, 0x78, 0x1C, 0x85, 0x2E, 0x77, 0x77, 0x77, 0x87, 0x86, 0x76, 0x86, 0x86, 0xA0,
	0xBD, 0x49, 0x97, 0x66, 0x48, 0x88, 0x48, 0x68, 0x86, 0x78, 0x77, 0x77, 0x78, 0x66, 0xA6, 0x87, 0x83, 0x85, 0x88, 0x78,
	0x66, 0xA7, 0x56, 0x87, 0x6A, 0x46, 0x89, 0x76, 0xA7, 0x76, 0x87, 0x74, 0xA2, 0x86, 0x77, 0x79, 0x66, 0xB6, 0x48, 0x67,
	0x8A, 0x36, 0x88, 0x77, 0xA5, 0xA5, 0xB1, 0xE9, 0x39, 0x78, 0x78, 0x75, 0x87, 0x77, 0x77, 0x77, 0x68, 0x58, 0x79, 0x69,
	0x4A, 0x59, 0x29, 0x6A, 0x3C, 0x3B, 0x46, 0x78, 0x75, 0x89, 0x76, 0x89, 0x4A, 0x56, 0x88, 0x3B, 0x66, 0x88, 0x68, 0x87,
	0x57, 0x97, 0x38, 0x87, 0x56, 0xB7, 0x84, 0x88, 0x67, 0x57, 0x95, 0xA8, 0x59, 0x77, 0x68, 0x4A, 0x49, 0x69, 0x57, 0x6A,
	0x59, 0x58, 0x67, 0x87, 0x5A, 0x75, 0x78, 0x69, 0x56, 0x97, 0x77, 0x73, 0x08, 0x78, 0x78, 0x77, 0x87, 0x78, 0x77, 0x78,
	0x77, 0x77, 0x87, 0x78, 0x68, 0x77, 0x77, 0x87, 0x78, 0x76, 0x86, 0x97, 0x58, 0x77, 0x78, 0x58, 0x78, 0x77, 0x68, 0x78,
	0x75, 0x95, 0xB7, 0x70, 0x8F, 0x80, 0xA6, 0x87, 0x65, 0x66, 0x78, 0x7A, 0x17, 0x77, 0x70,
}

func SIT13_Func1(s *SIT13Data, buf *SIT13Buffer, info uint32, bits uint16, num uint16) {
	var i, j uint32

	if bits <= 12 {
		for i = 0; i < (1 << 12); i += (1 << bits) {
			buf[info+i].data = num
			buf[info+i].bits = bits
		}
	} else {
		j = bits - 12

		if buf[info&0xFFF].bits != 0x1F {
			buf[info&0xFFF].bits = 0x1F
			buf[info&0xFFF].data = s.MaxBits
			s.MaxBits++
		}
		bits = buf[info&0xFFF].data
		info >>= 12

		for range j {
			uint16 * a

			if info != 0 {
				info = &s.Buffer4[bits].d2
			} else {
				info = &s.Buffer4[bits].d1
			}
			if !*a {
				*a = s.MaxBits
				s.MaxBits++
			}
			bits = *a
			info >>= 1
		}
		s.Buffer4[bits].freq = num
	}
}

func SIT13_SortTree(s *SIT13Data, buf *SIT13Buffer, buf2 *SIT13Buffer) {
	var td uint16
	var tb int8

	var a, b *SIT13Buffer

	for buf2-1 > buf {
		a = buf
		b = buf2

		for {
			a++
			for a < buf2 {
				tb = a.bits - buf.bits
				if tb > 0 || (!tb && (a.data >= buf.data)) {
					break
				}
				a++
			}
			b--
			for b > buf {
				tb = b.bits - buf.bits
				if tb < 0 || (!tb && (b.data <= buf.data)) {
					break
				}
				b--
			}
			if b < a {
				break
			} else {
				tb = a.bits
				td = a.data
				a.bits = b.bits
				a.data = b.data
				b.bits = tb
				b.data = td
			}
		}
		if b == buf {
			buf++
		} else {
			tb = buf.bits
			td = buf.data
			buf.bits = b.bits
			buf.data = b.data
			b.bits = tb
			b.data = td
			if buf2-b-1 > b-buf {
				SIT13_SortTree(s, buf, b)
				buf = b + 1
			} else {
				SIT13_SortTree(s, b+1, buf2)
				buf2 = b
			}
		}
	}
}

func SIT13_Func2(s *SIT13Data, buf *SIT13Buffer, bits uint16, buf2 *SIT13Buffer) {
	var i, j, k, l, m, n int32

	SIT13_SortTree(s, buf2, buf2+bits)

	for i = 0; i < bits; i++ {
		l += k
		m = buf2[i].bits
		if m != j {
			j = m
			if j == -1 {
				k = 0
			} else {
				k = 1 << (32 - j)
			}
		}
		if j > 0 {
			m = 0
			for n = 0; n < 8*4; n += 4 {
				m += SIT13Bits[(l>>n)&0xF] << (7*4 - n)
			}
			SIT13_Func1(s, buf, m, j, buf2[i].data)
		}
	}
}

func SIT13_CreateStaticTree(s *SIT13Data, buf *SIT13Buffer, bits uint16, bitsbuf *uint8) {
	var i uint32

	for i = 0; i < bits; i++ {
		s.Buffer5[i].data = i
		s.Buffer5[i].bits = bitsbuf[i]
	}
	SIT13_Func2(s, buf, bits, s.Buffer5)
}

func SIT13InitInfo(s *SIT13Data, id uint8) {
	var i int32
	var k, l uint8
	var a, b *uint8

	a = s.TextBuf
	b = /*(uint8 *)*/ SIT13Static + SIT13StaticPos[id-1]
	id &= 1

	for i = 658; i; i-- {
		if id != 0 {
			k = *b >> 4
		} else {
			k = *b & 0xF
			b++
		}
		id ^= 1

		if !k {
			if id != 0 {
				l -= *b >> 4
			} else {
				l -= *b & 0xF
				b++
			}
			id ^= 1
		} else {
			if k == 15 {
				if id != 0 {
					l += *b >> 4
				} else {
					l += *b & 0xF
					b++
				}
				id ^= 1
			} else {
				l += k - 7
			}
		}
		*a = l
		a++
	}
}

func SIT13_Extract(s *SIT13Data, io *xadInOut) {
	var wpos, j, k, l, size uint32
	SIT13Buffer * buf = s.Buffer3

	for !io.xio_Error {
		k = xadIOReadBitsLow(io, 12)
		j = buf[k].bits
		if j <= 12 {
			l = buf[k].data
			xadIODropBitsLow(io, j)
		} else {
			xadIODropBitsLow(io, 12)

			j = buf[k].data
			for s.Buffer4[j].freq == -1 {
				if xadIOGetBitsLow(io, 1) != 0 {
					j = s.Buffer4[j].d2
				} else {
					j = s.Buffer4[j].d1
				}
			}
			l = s.Buffer4[j].freq
		}
		if l < 0x100 {
			s.Window[wpos] = xadIOPutChar(io, l)
			wpos++
			wpos &= 0xFFFF
			buf = s.Buffer3
		} else {
			buf = s.Buffer3b
			if l < 0x13E {
				size = l - 0x100 + 3
			} else {
				if l == 0x13E {
					size = xadIOGetBitsLow(io, 10)
				} else {
					if l == 0x140 {
						return
					}
					size = xadIOGetBitsLow(io, 15)
				}
				size += 65
			}
			j = xadIOReadBitsLow(io, 12)
			k = s.Buffer2[j].bits
			if k <= 12 {
				l = s.Buffer2[j].data
				xadIODropBitsLow(io, k)
			} else {
				xadIODropBitsLow(io, 12)
				j = s.Buffer2[j].data
				for s.Buffer4[j].freq == -1 {
					if xadIOGetBitsLow(io, 1) != 0 {
						j = s.Buffer4[j].d2
					} else {
						j = s.Buffer4[j].d1
					}
				}
				l = s.Buffer4[j].freq
			}
			k = 0
			if l {
				l--
				k = (1 << l) | xadIOGetBitsLow(io, l)
			}
			l = wpos + 0x10000 - (k + 1)
			for range size {
				l &= 0xFFFF
				s.Window[wpos] = xadIOPutChar(io, s.Window[l])
				wpos++
				l++
				wpos &= 0xFFFF
			}
		} /* l >= 0x100 */
	}
}

func SIT13_CreateTree(s *SIT13Data, io *xadInOut, buf *SIT13Buffer, num uint16) {
	var b *SIT13Buffer
	var i uint32
	var data uint16
	var bi int8 = 0

	for i = 0; i < num; i++ {
		b = &s.Buffer1[xadIOReadBitsLow(io, 12)]
		data = b.data
		xadIODropBitsLow(io, b.bits)

		switch data - 0x1F {
		case 0:
			bi = -1
		case 1:
			bi++
		case 2:
			bi--
		case 3:
			if xadIOGetBitsLow(io, 1) {
				s.Buffer5[i].bits = bi
				i++
			}
			break
		case 4:
			data = xadIOGetBitsLow(io, 3) + 2
			for range data {
				s.Buffer5[i].bits = bi
				i++
			}
			break
		case 5:
			data = xadIOGetBitsLow(io, 6) + 10
			for range data {
				s.Buffer5[i].bits = bi
				i++
			}
			break
		default:
			bi = data + 1
			break
		}
		s.Buffer5[i].bits = bi
	}
	for i = 0; i < num; i++ {
		s.Buffer5[i].data = i
	}
	SIT13_Func2(s, buf, num, s.Buffer5)
}

func SIT_13(io *xadInOut) int32 {
	var i, j uint32
	var xadMasterBase *xadMasterBase = io.xio_xadMasterBase
	s := &SIT13Data{}
	s.MaxBits = 1
	for i = 0; i < 37; i++ {
		SIT13_Func1(s, s.Buffer1, SIT13Info[i], SIT13InfoBits[i], i)
	}
	for i = 1; i < 0x704; i++ {
		/* s.Buffer4[i].d1 = s.Buffer4[i].d2 = 0; */
		s.Buffer4[i].freq = -1
	}

	j = xadIOGetChar(io)
	i = j >> 4
	if i > 5 {
		io.xio_Error = XADERR_ILLEGALDATA
	} else if i {
		SIT13InitInfo(s, i)
		i--
		SIT13_CreateStaticTree(s, s.Buffer3, 0x141, s.TextBuf)
		SIT13_CreateStaticTree(s, s.Buffer3b, 0x141, s.TextBuf+0x141)
		SIT13_CreateStaticTree(s, s.Buffer2, SIT13StaticBits[i], s.TextBuf+0x282)
	} else {
		SIT13_CreateTree(s, io, s.Buffer3, 0x141)
		if j & 8 {
			xadCopyMem(s.Buffer3, s.Buffer3b, 0x1000*sizeof(SIT13Buffer))
		} else {
			SIT13_CreateTree(s, io, s.Buffer3b, 0x141)
		}
		j = (j & 7) + 10
		SIT13_CreateTree(s, io, s.Buffer2, j)
	}
	if !io.xio_Error {
		SIT13_Extract(s, io)
	}
	xadFreeObjectA(s, 0)
	return io.xio_Error
}
